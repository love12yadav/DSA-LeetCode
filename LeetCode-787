787. Cheapest Flights Within K Stops
class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        List<List<int[]>> adj = new ArrayList<>();
        int m = flights.length;
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());

        }
        for(int i=0;i<m;i++){
            adj.get(flights[i][0]).add(new int[]{flights[i][1],flights[i][2]});
        }
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{0,src,0});
        int[] dist = new int[n];
        Arrays.fill(dist,(int)(1e9));
        dist[src]=0;

        while(!q.isEmpty()){
            int[] curr = q.poll();
            int stops = curr[0];
            int node = curr[1];
            int cost= curr[2];

            if(stops>k) continue;
            for(int[] temp:adj.get(node)){
                int adjnode= temp[0];
                int ed = temp[1];
                if(ed+cost<dist[adjnode] && stops<=k){
                    dist[adjnode] = ed+cost;
                    q.add(new int[]{stops+1,adjnode,cost+ed});
                }
            }

        }
        if(dist[dst]==(int)(1e9)){
            return -1;
        }
        return dist[dst];
    }
}
