51. N-Queens
class Solution {
    
    public List<List<String>> solveNQueens(int n) {
        char[][] board = new char[n][n];
        List<List<String>> ans = new ArrayList<>();
        for(char [] row: board){
            Arrays.fill(row, '.');
        }
        nqueen(board,0,ans);
        return ans;
    }
    public void nqueen(char[][] b , int row,List<List<String>> ans ){
        if(row==b.length){
            add(b,ans );
            return;
        }
        for(int i=0;i<b.length;i++){
            if(safe(b,row,i)){
                b[row][i] ='Q';
                nqueen(b,row+1,ans);
                b[row][i] ='.';
            }
        }
    }
    public boolean safe(char[][] b,int row,int col){

        for(int i=row;i>=0;i--){
            if(b[i][col]=='Q'){
                return false;
            }
        }

        for(int i=row-1,j=col-1;i>=0 && j>=0 ;i--,j--){
            if(b[i][j]=='Q'){
                return false;
            }
        }

        for(int i=row-1,j=col+1;i>=0 && j<b.length ;i--,j++){
            if(b[i][j]=='Q'){
                return false;
            }
        }
        return true;
    }

    public void add(char[][] b,List<List<String>> ans ){
        List<String> l = new ArrayList<>();
        for (int i = 0; i < b.length; i++) {
            l.add(new String(b[i]));
        }
        ans.add(l);
    }
}
